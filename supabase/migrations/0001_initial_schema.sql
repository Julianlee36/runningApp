-- Create custom types
create type public.app_role as enum ('runner', 'coach');

-- USERS
create table public.users (
  id uuid not null references auth.users on delete cascade,
  first_name text,
  last_name text,
  role app_role not null default 'runner',
  primary key (id)
);
comment on table public.users is 'Public user data.';

-- ACTIVITIES
create table public.activities (
  id bigint generated by default as identity primary key,
  user_id uuid references public.users on delete cascade not null,
  title text not null,
  distance numeric not null,
  duration integer not null, -- in seconds
  elevation numeric,
  activity_date timestamptz not null,
  strava_id text, -- To link with Strava activities
  created_at timestamptz default now() not null
);
comment on table public.activities is 'Running and other physical activities.';

-- COACH/RUNNER RELATIONSHIPS
create table public.coach_runner_relationships (
  id bigint generated by default as identity primary key,
  coach_id uuid references public.users on delete cascade not null,
  runner_id uuid references public.users on delete cascade not null,
  created_at timestamptz default now() not null,
  unique (coach_id, runner_id)
);
comment on table public.coach_runner_relationships is 'Tracks which runners are managed by which coaches.';

-- TRAINING PLANS
create table public.training_plans (
  id bigint generated by default as identity primary key,
  coach_id uuid references public.users on delete cascade not null,
  runner_id uuid references public.users on delete cascade not null,
  title text not null,
  description text,
  start_date date not null,
  end_date date not null,
  created_at timestamptz default now() not null
);
comment on table public.training_plans is 'Training plans created by coaches for runners.';

-- Function to create a public user profile when a new auth user signs up
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.users (id, role)
  values (new.id, 'runner'); -- Default role is 'runner'
  return new;
end;
$$ language plpgsql security definer;

-- Trigger to call the function on new user signup
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- RLS POLICIES

-- Enable RLS for all tables
alter table public.users enable row level security;
alter table public.activities enable row level security;
alter table public.coach_runner_relationships enable row level security;
alter table public.training_plans enable row level security;

-- USERS
-- Allow users to see their own profile
create policy "Users can see their own profile" on public.users
  for select using (auth.uid() = id);
-- Allow users to update their own profile
create policy "Users can update their own profile" on public.users
  for update using (auth.uid() = id);

-- ACTIVITIES
-- Allow users to see their own activities
create policy "Users can see their own activities" on public.activities
  for select using (auth.uid() = user_id);
-- Allow users to create, update, and delete their own activities
create policy "Users can manage their own activities" on public.activities
  for all using (auth.uid() = user_id);
-- Allow coaches to see the activities of their runners
create policy "Coaches can see activities of their runners" on public.activities
  for select using (
    exists (
      select 1 from coach_runner_relationships
      where coach_id = auth.uid() and runner_id = user_id
    )
  );

-- COACH/RUNNER RELATIONSHIPS
-- Allow users to see their own relationships
create policy "Users can see their own relationships" on public.coach_runner_relationships
  for select using (auth.uid() = coach_id or auth.uid() = runner_id);
-- Allow coaches to manage relationships (invite/remove runners)
create policy "Coaches can manage their relationships" on public.coach_runner_relationships
  for all using (auth.uid() = coach_id);

-- TRAINING PLANS
-- Allow users to see plans they are part of
create policy "Users can see plans they are involved in" on public.training_plans
  for select using (auth.uid() = coach_id or auth.uid() = runner_id);
-- Allow coaches to manage plans
create policy "Coaches can manage training plans" on public.training_plans
  for all using (auth.uid() = coach_id); 